; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.61030.0 

	TITLE	E:\Dokumenty Koziol\GRZEGORZ\Dysk Google\Grzesiek\Dokumenty\STUDIA\JA\Projekt\Hasla\DLLC\Entry.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_startTime
PUBLIC	_endTime
PUBLIC	_resultTime
PUBLIC	_endTimefull
PUBLIC	_startTimefull
PUBLIC	_CPUInfo
PUBLIC	_bSSE41Extensions
PUBLIC	_bSSE42Extensions
PUBLIC	_nLogicalProcessors
PUBLIC	_nFeatureInfo
PUBLIC	_bMultithreading
_DATA	SEGMENT
COMM	___@@_PchSym_@00@UwlpfnvmgbLplarloUtiavtliaUwbhpLtlltovUtiavhrvpUwlpfnvmgbUhgfwrzUqzUkilqvpgUszhozUwooxUwvyftUhgwzucOlyq@7523FF6FB403CA84:DWORD
_DATA	ENDS
_BSS	SEGMENT
_startTime DD	01H DUP (?)
_endTime DD	01H DUP (?)
_resultTime DD	01H DUP (?)
_endTimefull DD	01H DUP (?)
_startTimefull DD 01H DUP (?)
_bSSE41Extensions DB 01H DUP (?)
	ALIGN	4

_bSSE42Extensions DB 01H DUP (?)
	ALIGN	4

_nLogicalProcessors DD 01H DUP (?)
_nFeatureInfo DD 01H DUP (?)
_bMultithreading DB 01H DUP (?)
_BSS	ENDS
_DATA	SEGMENT
_CPUInfo DD	0ffffffffH
	ORG $+12
_DATA	ENDS
PUBLIC	_newEntry
PUBLIC	_addEntryToList
PUBLIC	_readEntriesFromFile
PUBLIC	_writeEntriesToFileOrScreen
PUBLIC	_getNumberOfEntries
PUBLIC	_setPackage
PUBLIC	_deletePackage
PUBLIC	??_C@_0CG@MPHPHLCI@Nie?5udalo?5sie?5wczytac?5danych?5z?5p@ ; `string'
EXTRN	_strcpy:PROC
EXTRN	_strlen:PROC
EXTRN	__imp__strncpy:PROC
EXTRN	__imp__feof:PROC
EXTRN	__imp__fgets:PROC
EXTRN	__imp__fputs:PROC
EXTRN	__imp__printf:PROC
EXTRN	__imp__puts:PROC
EXTRN	__imp__calloc:PROC
EXTRN	__imp__free:PROC
EXTRN	__imp__malloc:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_0CG@MPHPHLCI@Nie?5udalo?5sie?5wczytac?5danych?5z?5p@
CONST	SEGMENT
??_C@_0CG@MPHPHLCI@Nie?5udalo?5sie?5wczytac?5danych?5z?5p@ DB 'Nie udalo '
	DB	'sie wczytac danych z pliku', 0aH, 00H	; `string'
CONST	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _deletePackage
_TEXT	SEGMENT
_pack$ = 8						; size = 4
_deletePackage PROC					; COMDAT
; File e:\dokumenty koziol\grzegorz\dysk google\grzesiek\dokumenty\studia\ja\projekt\hasla\dllc\entry.c
; Line 106
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 107
	mov	esi, esp
	mov	eax, DWORD PTR _pack$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 108
	mov	esi, esp
	mov	eax, DWORD PTR _pack$[ebp]
	push	eax
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 109
	xor	eax, eax
; Line 110
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_deletePackage ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _setPackage
_TEXT	SEGMENT
_package$ = -8						; size = 4
_word$ = 8						; size = 4
_database$ = 12						; size = 4
_results$ = 16						; size = 4
_fileptr$ = 20						; size = 4
_counter$ = 24						; size = 4
_setPackage PROC					; COMDAT
; File e:\dokumenty koziol\grzegorz\dysk google\grzesiek\dokumenty\studia\ja\projekt\hasla\dllc\entry.c
; Line 93
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 94
	mov	esi, esp
	push	20					; 00000014H
	call	DWORD PTR __imp__malloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _package$[ebp], eax
; Line 96
	mov	esi, esp
	push	1
	mov	eax, DWORD PTR _word$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	add	eax, 1
	push	eax
	call	DWORD PTR __imp__calloc
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _package$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 97
	mov	eax, DWORD PTR _word$[ebp]
	push	eax
	mov	ecx, DWORD PTR _package$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_strcpy
	add	esp, 8
; Line 98
	mov	eax, DWORD PTR _package$[ebp]
	mov	ecx, DWORD PTR _database$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 99
	mov	eax, DWORD PTR _package$[ebp]
	mov	ecx, DWORD PTR _results$[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 100
	mov	eax, DWORD PTR _package$[ebp]
	mov	ecx, DWORD PTR _counter$[ebp]
	mov	DWORD PTR [eax+16], ecx
; Line 101
	mov	eax, DWORD PTR _package$[ebp]
	mov	ecx, DWORD PTR _fileptr$[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 102
	mov	eax, DWORD PTR _package$[ebp]
; Line 103
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_setPackage ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _getNumberOfEntries
_TEXT	SEGMENT
_i$ = -8						; size = 4
_database$ = 8						; size = 4
_getNumberOfEntries PROC				; COMDAT
; File e:\dokumenty koziol\grzegorz\dysk google\grzesiek\dokumenty\studia\ja\projekt\hasla\dllc\entry.c
; Line 78
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 79
	mov	DWORD PTR _i$[ebp], 0
; Line 81
	cmp	DWORD PTR _database$[ebp], 0
	je	SHORT $LN3@getNumberO
$LN2@getNumberO:
; Line 83
	cmp	DWORD PTR _database$[ebp], 0
	je	SHORT $LN3@getNumberO
; Line 85
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
; Line 86
	mov	eax, DWORD PTR _database$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _database$[ebp], ecx
; Line 87
	jmp	SHORT $LN2@getNumberO
$LN3@getNumberO:
; Line 89
	mov	eax, DWORD PTR _i$[ebp]
; Line 90
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_getNumberOfEntries ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _writeEntriesToFileOrScreen
_TEXT	SEGMENT
_fileptr$ = 8						; size = 4
_database$ = 12						; size = 4
_opt$ = 16						; size = 1
_writeEntriesToFileOrScreen PROC			; COMDAT
; File e:\dokumenty koziol\grzegorz\dysk google\grzesiek\dokumenty\studia\ja\projekt\hasla\dllc\entry.c
; Line 63
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 64
	cmp	DWORD PTR _database$[ebp], 0
	je	SHORT $LN6@writeEntri
$LN4@writeEntri:
; Line 66
	cmp	DWORD PTR _database$[ebp], 0
	je	SHORT $LN6@writeEntri
; Line 68
	movzx	eax, BYTE PTR _opt$[ebp]
	test	eax, eax
	jne	SHORT $LN2@writeEntri
; Line 69
	mov	esi, esp
	mov	eax, DWORD PTR _fileptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _database$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	DWORD PTR __imp__fputs
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 70
	jmp	SHORT $LN1@writeEntri
$LN2@writeEntri:
; Line 71
	mov	esi, esp
	mov	eax, DWORD PTR _database$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	DWORD PTR __imp__puts
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@writeEntri:
; Line 72
	mov	eax, DWORD PTR _database$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _database$[ebp], ecx
; Line 73
	jmp	SHORT $LN4@writeEntri
$LN6@writeEntri:
; Line 75
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_writeEntriesToFileOrScreen ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _readEntriesFromFile
_TEXT	SEGMENT
_tmp$ = -44						; size = 4
_tmppointer$ = -32					; size = 4
_datatmp$ = -20						; size = 4
_database$ = -8						; size = 4
_fileptr$ = 8						; size = 4
_readEntriesFromFile PROC				; COMDAT
; File e:\dokumenty koziol\grzegorz\dysk google\grzesiek\dokumenty\studia\ja\projekt\hasla\dllc\entry.c
; Line 37
	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 38
	mov	DWORD PTR _database$[ebp], 0
	mov	eax, DWORD PTR _database$[ebp]
	mov	DWORD PTR _datatmp$[ebp], eax
	mov	DWORD PTR _tmppointer$[ebp], 0
; Line 39
	mov	DWORD PTR _tmp$[ebp], 0
; Line 40
	cmp	DWORD PTR _fileptr$[ebp], 0
	je	$LN7@readEntrie
$LN6@readEntrie:
; Line 42
	mov	esi, esp
	mov	eax, DWORD PTR _fileptr$[ebp]
	push	eax
	call	DWORD PTR __imp__feof
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	$LN5@readEntrie
; Line 44
	mov	esi, esp
	push	32					; 00000020H
	call	DWORD PTR __imp__malloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _tmp$[ebp], eax
; Line 45
	push	1
	mov	esi, esp
	mov	eax, DWORD PTR _fileptr$[ebp]
	push	eax
	push	32					; 00000020H
	mov	ecx, DWORD PTR _tmp$[ebp]
	push	ecx
	call	DWORD PTR __imp__fgets
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_newEntry
	add	esp, 8
	mov	DWORD PTR _datatmp$[ebp], eax
; Line 46
	cmp	DWORD PTR _tmppointer$[ebp], 0
	je	SHORT $LN4@readEntrie
; Line 47
	mov	eax, DWORD PTR _tmppointer$[ebp]
	mov	ecx, DWORD PTR _datatmp$[ebp]
	mov	DWORD PTR [eax+4], ecx
$LN4@readEntrie:
; Line 48
	mov	eax, DWORD PTR _datatmp$[ebp]
	mov	DWORD PTR _tmppointer$[ebp], eax
; Line 49
	cmp	DWORD PTR _database$[ebp], 0
	jne	SHORT $LN3@readEntrie
; Line 50
	mov	eax, DWORD PTR _datatmp$[ebp]
	mov	DWORD PTR _database$[ebp], eax
$LN3@readEntrie:
; Line 51
	mov	esi, esp
	mov	eax, DWORD PTR _tmp$[ebp]
	push	eax
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 52
	mov	DWORD PTR _tmp$[ebp], 0
; Line 53
	cmp	DWORD PTR _datatmp$[ebp], 0
	je	SHORT $LN2@readEntrie
; Line 54
	mov	eax, DWORD PTR _datatmp$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _datatmp$[ebp], ecx
$LN2@readEntrie:
; Line 55
	jmp	$LN6@readEntrie
$LN5@readEntrie:
; Line 57
	jmp	SHORT $LN1@readEntrie
$LN7@readEntrie:
; Line 58
	mov	esi, esp
	push	OFFSET ??_C@_0CG@MPHPHLCI@Nie?5udalo?5sie?5wczytac?5danych?5z?5p@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@readEntrie:
; Line 59
	mov	eax, DWORD PTR _database$[ebp]
; Line 60
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_readEntriesFromFile ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _addEntryToList
_TEXT	SEGMENT
_tmpbase$ = -8						; size = 4
_element$ = 8						; size = 4
_database$ = 12						; size = 4
_addEntryToList PROC					; COMDAT
; File e:\dokumenty koziol\grzegorz\dysk google\grzesiek\dokumenty\studia\ja\projekt\hasla\dllc\entry.c
; Line 23
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 24
	mov	eax, DWORD PTR _database$[ebp]
	mov	DWORD PTR _tmpbase$[ebp], eax
; Line 25
	cmp	DWORD PTR _database$[ebp], 0
	jne	SHORT $LN2@addEntryTo
; Line 27
	mov	eax, DWORD PTR _element$[ebp]
	mov	DWORD PTR _database$[ebp], eax
; Line 28
	mov	eax, DWORD PTR _database$[ebp]
	jmp	SHORT $LN5@addEntryTo
; Line 30
	jmp	SHORT $LN3@addEntryTo
$LN2@addEntryTo:
; Line 31
	mov	eax, DWORD PTR _tmpbase$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN3@addEntryTo
; Line 32
	mov	eax, DWORD PTR _tmpbase$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _tmpbase$[ebp], ecx
	jmp	SHORT $LN2@addEntryTo
$LN3@addEntryTo:
; Line 33
	mov	eax, DWORD PTR _tmpbase$[ebp]
	mov	ecx, DWORD PTR _element$[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 34
	mov	eax, DWORD PTR _database$[ebp]
$LN5@addEntryTo:
; Line 35
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_addEntryToList ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _newEntry
_TEXT	SEGMENT
_tmp$ = -8						; size = 4
_name$ = 8						; size = 4
_opt$ = 12						; size = 4
_newEntry PROC						; COMDAT
; File e:\dokumenty koziol\grzegorz\dysk google\grzesiek\dokumenty\studia\ja\projekt\hasla\dllc\entry.c
; Line 5
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 6
	mov	DWORD PTR _tmp$[ebp], 0
; Line 7
	cmp	DWORD PTR _name$[ebp], 0
	je	$LN3@newEntry
; Line 9
	mov	esi, esp
	push	8
	call	DWORD PTR __imp__malloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _tmp$[ebp], eax
; Line 10
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	add	eax, 1
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__malloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _tmp$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 11
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tmp$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	DWORD PTR __imp__strncpy
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 12
	cmp	DWORD PTR _opt$[ebp], 1
	jne	SHORT $LN2@newEntry
; Line 13
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	mov	ecx, DWORD PTR _tmp$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	BYTE PTR [edx+eax-1], 0
; Line 14
	jmp	SHORT $LN1@newEntry
$LN2@newEntry:
; Line 15
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	mov	ecx, DWORD PTR _tmp$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	BYTE PTR [edx+eax], 0
$LN1@newEntry:
; Line 17
	mov	eax, DWORD PTR _tmp$[ebp]
	mov	DWORD PTR [eax+4], 0
$LN3@newEntry:
; Line 19
	mov	eax, DWORD PTR _tmp$[ebp]
; Line 20
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_newEntry ENDP
_TEXT	ENDS
END

; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.61030.0 

	TITLE	C:\Users\paind_000\Dysk Google\Grzesiek\Dokumenty\STUDIA\JA\Projekt\Hasla\Hasla\Entry.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_startTime
PUBLIC	_endTime
PUBLIC	_resultTime
PUBLIC	_endTimefull
PUBLIC	_startTimefull
PUBLIC	_CPUInfo
PUBLIC	_bSSE41Extensions
PUBLIC	_bSSE42Extensions
PUBLIC	_nLogicalProcessors
PUBLIC	_nFeatureInfo
PUBLIC	_bMultithreading
_BSS	SEGMENT
_startTime DD	01H DUP (?)
_endTime DD	01H DUP (?)
_resultTime DD	01H DUP (?)
_endTimefull DD	01H DUP (?)
_startTimefull DD 01H DUP (?)
_bSSE41Extensions DB 01H DUP (?)
	ALIGN	4

_bSSE42Extensions DB 01H DUP (?)
	ALIGN	4

_nLogicalProcessors DD 01H DUP (?)
_nFeatureInfo DD 01H DUP (?)
_bMultithreading DB 01H DUP (?)
_BSS	ENDS
_DATA	SEGMENT
_CPUInfo DD	0ffffffffH
	ORG $+12
_DATA	ENDS
PUBLIC	_newEntry
PUBLIC	_addEntryToList
PUBLIC	_readEntriesFromFile
PUBLIC	_writeEntriesToFileOrScreen
PUBLIC	_getNumberOfEntries
PUBLIC	_setPackage
PUBLIC	_deletePackage
PUBLIC	??_C@_1EM@HMMIEIEO@?$AAN?$AAi?$AAe?$AA?5?$AAu?$AAd?$AAa?$AAl?$AAo?$AA?5?$AAs?$AAi?$AAe?$AA?5?$AAw?$AAc?$AAz?$AAy?$AAt?$AAa?$AAc?$AA?5?$AAd?$AAa?$AAn?$AAy?$AAc?$AAh?$AA?5?$AAz?$AA?5?$AAp@ ; `string'
EXTRN	__imp__wcscpy:PROC
EXTRN	__imp__wcslen:PROC
EXTRN	__imp__calloc:PROC
EXTRN	__imp__free:PROC
EXTRN	__imp__malloc:PROC
EXTRN	__imp____iob_func:PROC
EXTRN	__imp__feof:PROC
EXTRN	__imp__fgetws:PROC
EXTRN	__imp__fputws:PROC
EXTRN	__imp__fwprintf:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_1EM@HMMIEIEO@?$AAN?$AAi?$AAe?$AA?5?$AAu?$AAd?$AAa?$AAl?$AAo?$AA?5?$AAs?$AAi?$AAe?$AA?5?$AAw?$AAc?$AAz?$AAy?$AAt?$AAa?$AAc?$AA?5?$AAd?$AAa?$AAn?$AAy?$AAc?$AAh?$AA?5?$AAz?$AA?5?$AAp@
CONST	SEGMENT
??_C@_1EM@HMMIEIEO@?$AAN?$AAi?$AAe?$AA?5?$AAu?$AAd?$AAa?$AAl?$AAo?$AA?5?$AAs?$AAi?$AAe?$AA?5?$AAw?$AAc?$AAz?$AAy?$AAt?$AAa?$AAc?$AA?5?$AAd?$AAa?$AAn?$AAy?$AAc?$AAh?$AA?5?$AAz?$AA?5?$AAp@ DB 'N'
	DB	00H, 'i', 00H, 'e', 00H, ' ', 00H, 'u', 00H, 'd', 00H, 'a', 00H
	DB	'l', 00H, 'o', 00H, ' ', 00H, 's', 00H, 'i', 00H, 'e', 00H, ' '
	DB	00H, 'w', 00H, 'c', 00H, 'z', 00H, 'y', 00H, 't', 00H, 'a', 00H
	DB	'c', 00H, ' ', 00H, 'd', 00H, 'a', 00H, 'n', 00H, 'y', 00H, 'c'
	DB	00H, 'h', 00H, ' ', 00H, 'z', 00H, ' ', 00H, 'p', 00H, 'l', 00H
	DB	'i', 00H, 'k', 00H, 'u', 00H, 0aH, 00H, 00H, 00H ; `string'
CONST	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\paind_000\dysk google\grzesiek\dokumenty\studia\ja\projekt\hasla\hasla\entry.c
;	COMDAT _deletePackage
_TEXT	SEGMENT
_pack$ = 8						; size = 4
_deletePackage PROC					; COMDAT

; 107  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 108  : 	free(pack->word);

	mov	esi, esp
	mov	eax, DWORD PTR _pack$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 109  : 	free(pack);

	mov	esi, esp
	mov	eax, DWORD PTR _pack$[ebp]
	push	eax
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 110  : 	return NULL;

	xor	eax, eax

; 111  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_deletePackage ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\paind_000\dysk google\grzesiek\dokumenty\studia\ja\projekt\hasla\hasla\entry.c
;	COMDAT _setPackage
_TEXT	SEGMENT
_package$ = -8						; size = 4
_word$ = 8						; size = 4
_database$ = 12						; size = 4
_results$ = 16						; size = 4
_fileptr$ = 20						; size = 4
_counter$ = 24						; size = 4
_setPackage PROC					; COMDAT

; 94   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 95   : 	Package * package=(Package *) malloc (sizeof(Package));

	mov	esi, esp
	push	20					; 00000014H
	call	DWORD PTR __imp__malloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _package$[ebp], eax

; 96   : 
; 97   : 	package->word=(wchar_t *) calloc(wcslen(word)+1,sizeof(wchar_t));

	mov	esi, esp
	push	2
	mov	edi, esp
	mov	eax, DWORD PTR _word$[ebp]
	push	eax
	call	DWORD PTR __imp__wcslen
	add	esp, 4
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 1
	push	eax
	call	DWORD PTR __imp__calloc
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _package$[ebp]
	mov	DWORD PTR [ecx], eax

; 98   : 	wcscpy(package->word,word);

	mov	esi, esp
	mov	eax, DWORD PTR _word$[ebp]
	push	eax
	mov	ecx, DWORD PTR _package$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	DWORD PTR __imp__wcscpy
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 99   : 	package->database=database;

	mov	eax, DWORD PTR _package$[ebp]
	mov	ecx, DWORD PTR _database$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 100  : 	package->results=results;

	mov	eax, DWORD PTR _package$[ebp]
	mov	ecx, DWORD PTR _results$[ebp]
	mov	DWORD PTR [eax+12], ecx

; 101  : 	package->counter=counter;

	mov	eax, DWORD PTR _package$[ebp]
	mov	ecx, DWORD PTR _counter$[ebp]
	mov	DWORD PTR [eax+16], ecx

; 102  : 	package->fileptr=fileptr;

	mov	eax, DWORD PTR _package$[ebp]
	mov	ecx, DWORD PTR _fileptr$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 103  : 	return package;

	mov	eax, DWORD PTR _package$[ebp]

; 104  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_setPackage ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\paind_000\dysk google\grzesiek\dokumenty\studia\ja\projekt\hasla\hasla\entry.c
;	COMDAT _getNumberOfEntries
_TEXT	SEGMENT
_i$ = -8						; size = 4
_database$ = 8						; size = 4
_getNumberOfEntries PROC				; COMDAT

; 79   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 80   : 	int i=0;

	mov	DWORD PTR _i$[ebp], 0

; 81   : 
; 82   : 	if(database!=NULL)

	cmp	DWORD PTR _database$[ebp], 0
	je	SHORT $LN3@getNumberO
$LN2@getNumberO:

; 83   : 	{
; 84   : 		while(database!=NULL)

	cmp	DWORD PTR _database$[ebp], 0
	je	SHORT $LN3@getNumberO

; 85   : 		{
; 86   : 			i++;

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 87   : 			database=database->next;

	mov	eax, DWORD PTR _database$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _database$[ebp], ecx

; 88   : 		}

	jmp	SHORT $LN2@getNumberO
$LN3@getNumberO:

; 89   : 	}
; 90   : 	return i;

	mov	eax, DWORD PTR _i$[ebp]

; 91   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_getNumberOfEntries ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\paind_000\dysk google\grzesiek\dokumenty\studia\ja\projekt\hasla\hasla\entry.c
;	COMDAT _writeEntriesToFileOrScreen
_TEXT	SEGMENT
_fileptr$ = 8						; size = 4
_database$ = 12						; size = 4
_opt$ = 16						; size = 1
_writeEntriesToFileOrScreen PROC			; COMDAT

; 64   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 65   : 	if(database!=NULL)

	cmp	DWORD PTR _database$[ebp], 0
	je	SHORT $LN6@writeEntri
$LN4@writeEntri:

; 66   : 	{
; 67   : 		while(database!=NULL)

	cmp	DWORD PTR _database$[ebp], 0
	je	SHORT $LN6@writeEntri

; 68   : 		{
; 69   : 			if(opt==0)

	movzx	eax, BYTE PTR _opt$[ebp]
	test	eax, eax
	jne	SHORT $LN2@writeEntri

; 70   : 				fputws(database->word,fileptr);

	mov	esi, esp
	mov	eax, DWORD PTR _fileptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _database$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	DWORD PTR __imp__fputws
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 71   : 			else

	jmp	SHORT $LN1@writeEntri
$LN2@writeEntri:

; 72   : 				fputws(database->word,stdout);

	mov	esi, esp
	call	DWORD PTR __imp____iob_func
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, 32					; 00000020H
	shl	ecx, 0
	add	eax, ecx
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR _database$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	DWORD PTR __imp__fputws
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@writeEntri:

; 73   : 			database=database->next;

	mov	eax, DWORD PTR _database$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _database$[ebp], ecx

; 74   : 		}		

	jmp	SHORT $LN4@writeEntri
$LN6@writeEntri:

; 75   : 	}
; 76   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_writeEntriesToFileOrScreen ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\paind_000\dysk google\grzesiek\dokumenty\studia\ja\projekt\hasla\hasla\entry.c
;	COMDAT _readEntriesFromFile
_TEXT	SEGMENT
_i$ = -68						; size = 4
_tmp$ = -56						; size = 4
_tmp2$ = -44						; size = 4
_tmppointer$ = -32					; size = 4
_datatmp$ = -20						; size = 4
_database$ = -8						; size = 4
_fileptr$ = 8						; size = 4
_strlen$ = 12						; size = 4
_readEntriesFromFile PROC				; COMDAT

; 34   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-264]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 35   : 	Entry * database=NULL,*datatmp=database, * tmppointer=NULL;

	mov	DWORD PTR _database$[ebp], 0
	mov	eax, DWORD PTR _database$[ebp]
	mov	DWORD PTR _datatmp$[ebp], eax
	mov	DWORD PTR _tmppointer$[ebp], 0

; 36   : 	wchar_t * tmp2=NULL;

	mov	DWORD PTR _tmp2$[ebp], 0

; 37   : 	wchar_t * tmp=(wchar_t *)malloc(sizeof(wchar_t) * (MAX_LENGTH_WORD));

	mov	esi, esp
	push	64					; 00000040H
	call	DWORD PTR __imp__malloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _tmp$[ebp], eax

; 38   : 	int i=0;

	mov	DWORD PTR _i$[ebp], 0

; 39   : 	if(fileptr!=NULL)

	cmp	DWORD PTR _fileptr$[ebp], 0
	je	$LN8@readEntrie
$LN7@readEntrie:

; 40   : 	{
; 41   : 		while(!feof(fileptr))

	mov	esi, esp
	mov	eax, DWORD PTR _fileptr$[ebp]
	push	eax
	call	DWORD PTR __imp__feof
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	$LN6@readEntrie

; 42   : 		{	
; 43   : 			tmp=fgetws(tmp,MAX_LENGTH_WORD,fileptr);

	mov	esi, esp
	mov	eax, DWORD PTR _fileptr$[ebp]
	push	eax
	push	32					; 00000020H
	mov	ecx, DWORD PTR _tmp$[ebp]
	push	ecx
	call	DWORD PTR __imp__fgetws
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _tmp$[ebp], eax

; 44   : 			tmp[wcslen(tmp)-1]=L'\0';

	mov	esi, esp
	mov	eax, DWORD PTR _tmp$[ebp]
	push	eax
	call	DWORD PTR __imp__wcslen
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	xor	ecx, ecx
	mov	edx, DWORD PTR _tmp$[ebp]
	mov	WORD PTR [edx+eax*2-2], cx

; 45   : 			if((i=wcslen(tmp)) != strlen)				

	mov	esi, esp
	mov	eax, DWORD PTR _tmp$[ebp]
	push	eax
	call	DWORD PTR __imp__wcslen
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _strlen$[ebp]
	je	SHORT $LN5@readEntrie

; 46   : 				continue;

	jmp	SHORT $LN7@readEntrie
$LN5@readEntrie:

; 47   : 			datatmp=newEntry(tmp,0);

	push	0
	mov	eax, DWORD PTR _tmp$[ebp]
	push	eax
	call	_newEntry
	add	esp, 8
	mov	DWORD PTR _datatmp$[ebp], eax

; 48   : 			if(tmppointer!=NULL)

	cmp	DWORD PTR _tmppointer$[ebp], 0
	je	SHORT $LN4@readEntrie

; 49   : 				tmppointer->next=datatmp;

	mov	eax, DWORD PTR _tmppointer$[ebp]
	mov	ecx, DWORD PTR _datatmp$[ebp]
	mov	DWORD PTR [eax+4], ecx
$LN4@readEntrie:

; 50   : 			tmppointer=datatmp;

	mov	eax, DWORD PTR _datatmp$[ebp]
	mov	DWORD PTR _tmppointer$[ebp], eax

; 51   : 			if(database==NULL)

	cmp	DWORD PTR _database$[ebp], 0
	jne	SHORT $LN3@readEntrie

; 52   : 				database=datatmp;		

	mov	eax, DWORD PTR _datatmp$[ebp]
	mov	DWORD PTR _database$[ebp], eax
$LN3@readEntrie:

; 53   : 			if (datatmp!=NULL)

	cmp	DWORD PTR _datatmp$[ebp], 0
	je	SHORT $LN2@readEntrie

; 54   : 				datatmp=datatmp->next;

	mov	eax, DWORD PTR _datatmp$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _datatmp$[ebp], ecx
$LN2@readEntrie:

; 55   : 		}

	jmp	$LN7@readEntrie
$LN6@readEntrie:

; 56   : 	}
; 57   : 	else

	jmp	SHORT $LN1@readEntrie
$LN8@readEntrie:

; 58   : 		fwprintf(stdout,L"Nie udalo sie wczytac danych z pliku\n");

	mov	esi, esp
	push	OFFSET ??_C@_1EM@HMMIEIEO@?$AAN?$AAi?$AAe?$AA?5?$AAu?$AAd?$AAa?$AAl?$AAo?$AA?5?$AAs?$AAi?$AAe?$AA?5?$AAw?$AAc?$AAz?$AAy?$AAt?$AAa?$AAc?$AA?5?$AAd?$AAa?$AAn?$AAy?$AAc?$AAh?$AA?5?$AAz?$AA?5?$AAp@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	mov	ecx, 32					; 00000020H
	shl	ecx, 0
	add	eax, ecx
	push	eax
	call	DWORD PTR __imp__fwprintf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@readEntrie:

; 59   : 	free(tmp);

	mov	esi, esp
	mov	eax, DWORD PTR _tmp$[ebp]
	push	eax
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 60   : 	return database;

	mov	eax, DWORD PTR _database$[ebp]

; 61   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 264				; 00000108H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_readEntriesFromFile ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\paind_000\dysk google\grzesiek\dokumenty\studia\ja\projekt\hasla\hasla\entry.c
;	COMDAT _addEntryToList
_TEXT	SEGMENT
_tmpbase$ = -8						; size = 4
_element$ = 8						; size = 4
_database$ = 12						; size = 4
_addEntryToList PROC					; COMDAT

; 20   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 21   : 	Entry * tmpbase=database;

	mov	eax, DWORD PTR _database$[ebp]
	mov	DWORD PTR _tmpbase$[ebp], eax

; 22   : 	if(database==NULL)

	cmp	DWORD PTR _database$[ebp], 0
	jne	SHORT $LN2@addEntryTo

; 23   : 	{
; 24   : 		database=element;

	mov	eax, DWORD PTR _element$[ebp]
	mov	DWORD PTR _database$[ebp], eax

; 25   : 		return database;

	mov	eax, DWORD PTR _database$[ebp]
	jmp	SHORT $LN5@addEntryTo

; 26   : 	}
; 27   : 	else

	jmp	SHORT $LN3@addEntryTo
$LN2@addEntryTo:

; 28   : 		while(tmpbase->next!=NULL)

	mov	eax, DWORD PTR _tmpbase$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN3@addEntryTo

; 29   : 			tmpbase=tmpbase->next;

	mov	eax, DWORD PTR _tmpbase$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _tmpbase$[ebp], ecx
	jmp	SHORT $LN2@addEntryTo
$LN3@addEntryTo:

; 30   : 	tmpbase->next=element;

	mov	eax, DWORD PTR _tmpbase$[ebp]
	mov	ecx, DWORD PTR _element$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 31   : 	return database;

	mov	eax, DWORD PTR _database$[ebp]
$LN5@addEntryTo:

; 32   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_addEntryToList ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\paind_000\dysk google\grzesiek\dokumenty\studia\ja\projekt\hasla\hasla\entry.c
;	COMDAT _newEntry
_TEXT	SEGMENT
_tmp$ = -8						; size = 4
_name$ = 8						; size = 4
_opt$ = 12						; size = 4
_newEntry PROC						; COMDAT

; 5    : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 6    : 	Entry * tmp=NULL;

	mov	DWORD PTR _tmp$[ebp], 0

; 7    : 	if(name!=NULL)

	cmp	DWORD PTR _name$[ebp], 0
	je	$LN2@newEntry

; 8    : 	{
; 9    : 		tmp=(Entry *)malloc(sizeof(Entry));

	mov	esi, esp
	push	8
	call	DWORD PTR __imp__malloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _tmp$[ebp], eax

; 10   : 		tmp->word=(wchar_t *) malloc((wcslen(name)+1) * sizeof(wchar_t));

	mov	esi, esp
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	call	DWORD PTR __imp__wcslen
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	lea	ecx, DWORD PTR [eax+eax+2]
	mov	esi, esp
	push	ecx
	call	DWORD PTR __imp__malloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edx, DWORD PTR _tmp$[ebp]
	mov	DWORD PTR [edx], eax

; 11   : 		wcscpy(tmp->word,name);		

	mov	esi, esp
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tmp$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	DWORD PTR __imp__wcscpy
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 12   : 		if(opt==1)

	cmp	DWORD PTR _opt$[ebp], 1
	jne	SHORT $LN1@newEntry

; 13   : 			tmp->word[wcslen(name)]=0;

	mov	esi, esp
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	call	DWORD PTR __imp__wcslen
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _tmp$[ebp]
	mov	edx, DWORD PTR [ecx]
	xor	ecx, ecx
	mov	WORD PTR [edx+eax*2], cx
$LN1@newEntry:

; 14   : 		tmp->next=NULL;

	mov	eax, DWORD PTR _tmp$[ebp]
	mov	DWORD PTR [eax+4], 0
$LN2@newEntry:

; 15   : 	}
; 16   : 	return tmp;

	mov	eax, DWORD PTR _tmp$[ebp]

; 17   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_newEntry ENDP
_TEXT	ENDS
END
